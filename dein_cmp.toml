[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_add = '''
require('mason').setup()
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
lua_add = '''
require('mason_lspconfig')
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-path'
lua_add = '''
local cmp = require("cmp")
cmp.setup.cmdline(":", {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = "path" }, --ソース類を設定
  },
})
'''

[[plugins]]
repo = 'onsails/lspkind.nvim'
lua_add = '''
local lspkind = require 'lspkind'
local cmp = require("cmp")
cmp.setup({
  formatting = {
    format = lspkind.cmp_format({
      mode = 'symbol', -- show only symbol annotations
      maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)
      ellipsis_char = '...', -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead (must define maxwidth first)
      -- The function below will be called before any actual modifications from lspkind
      -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
    })
  }
})
'''

[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'
lua_add = '''
local cmp = require("cmp")
cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body)
    end,
  }
})
'''

[[plugins]]
repo = 'sirver/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
'''
